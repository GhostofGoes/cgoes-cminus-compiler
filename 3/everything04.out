Var gromit of type int [line: 6]
|Sibling: 1  Func wallace returns type void [line: 8]
|   Child: 0  Param wrong of type int [line: 8]
|   |Sibling: 1  Param trousers of type int [line: 8]
|   Child: 1  Compound [line: 9]
|   |   Child: 0  Var close of type bool [line: 10]
|   |   |   Child: 0  Const: true [line: 10]
|   |   |Sibling: 1  Var shave of type bool [line: 10]
|   |   |   Child: 0  Const: false [line: 10]
|   |   Child: 1  Const: 1729 [line: 12]
|   |   |Sibling: 1  Id: close [line: 13]
|   |   |Sibling: 2  Op: + [line: 14]
|   |   |   Child: 0  Op: * [line: 14]
|   |   |   |   Child: 0  Const: 11 [line: 14]
|   |   |   |   Child: 1  Const: 22 [line: 14]
|   |   |   Child: 1  Op: * [line: 14]
|   |   |   |   Child: 0  Const: 33 [line: 14]
|   |   |   |   Child: 1  Const: 44 [line: 14]
|   |   |Sibling: 3  Assign: = [line: 15]
|   |   |   Child: 0  Id: close [line: 15]
|   |   |   Child: 1  Id: shave [line: 15]
|   |   |Sibling: 4  Assign: = [line: 16]
|   |   |   Child: 0  Id: wrong [line: 16]
|   |   |   Child: 1  Op: % [line: 16]
|   |   |   |   Child: 0  Id: trousers [line: 16]
|   |   |   |   Child: 1  Op: / [line: 16]
|   |   |   |   |   Child: 0  Const: 666 [line: 16]
|   |   |   |   |   Child: 1  Id: wrong [line: 16]
|   |   |Sibling: 5  Assign: = [line: 17]
|   |   |   Child: 0  Id: gromit [line: 17]
|   |   |   Child: 1  Op: + [line: 17]
|   |   |   |   Child: 0  Op: - [line: 17]
|   |   |   |   |   Child: 0  Op: * [line: 17]
|   |   |   |   |   |   Child: 0  Id: wrong [line: 17]
|   |   |   |   |   |   Child: 1  Id: trousers [line: 17]
|   |   |   |   |   Child: 1  Id: gromit [line: 17]
|   |   |   |   Child: 1  Op: - [line: 17]
|   |   |   |   |   Child: 0  Const: 42 [line: 17]
|   |   |Sibling: 6  Assign: += [line: 18]
|   |   |   Child: 0  Id: gromit [line: 18]
|   |   |   Child: 1  Const: 27182818 [line: 18]
|   |   |Sibling: 7  Assign: -= [line: 19]
|   |   |   Child: 0  Id: gromit [line: 19]
|   |   |   Child: 1  Op: - [line: 19]
|   |   |   |   Child: 0  Const: 31415927 [line: 19]
|   |   |Sibling: 8  Assign: /= [line: 20]
|   |   |   Child: 0  Id: gromit [line: 20]
|   |   |   Child: 1  Assign: *= [line: 20]
|   |   |   |   Child: 0  Id: wrong [line: 20]
|   |   |   |   Child: 1  Const: 42 [line: 20]
|   |   |Sibling: 9  Assign: = [line: 21]
|   |   |   Child: 0  Id: close [line: 21]
|   |   |   Child: 1  Op: & [line: 21]
|   |   |   |   Child: 0  Op: < [line: 21]
|   |   |   |   |   Child: 0  Id: wrong [line: 21]
|   |   |   |   |   Child: 1  Id: trousers [line: 21]
|   |   |   |   Child: 1  Op: <= [line: 21]
|   |   |   |   |   Child: 0  Id: trousers [line: 21]
|   |   |   |   |   Child: 1  Id: gromit [line: 21]
|   |   |Sibling: 10  Assign: = [line: 22]
|   |   |   Child: 0  Id: shave [line: 22]
|   |   |   Child: 1  Op: & [line: 22]
|   |   |   |   Child: 0  Op: > [line: 22]
|   |   |   |   |   Child: 0  Id: wrong [line: 22]
|   |   |   |   |   Child: 1  Id: trousers [line: 22]
|   |   |   |   Child: 1  Op: >= [line: 22]
|   |   |   |   |   Child: 0  Id: trousers [line: 22]
|   |   |   |   |   Child: 1  Id: gromit [line: 22]
|   |   |Sibling: 11  Compound [line: 23]
|   |   |   Child: 0  Var a of type int [line: 24]
|   |   |   |Sibling: 1  Var grand of type int [line: 24]
|   |   |   |   Child: 0  Op: / [line: 24]
|   |   |   |   |   Child: 0  Const: 1 [line: 24]
|   |   |   |   |   Child: 1  Const: 2 [line: 24]
|   |   |   |Sibling: 2  Var day of type int [line: 24]
|   |   |   |   Child: 0  Op: * [line: 24]
|   |   |   |   |   Child: 0  Const: 3 [line: 24]
|   |   |   |   |   Child: 1  Const: 4 [line: 24]
|   |   |   |Sibling: 3  Var out of type int [line: 24]
|   |   |   |   Child: 0  Op: - [line: 24]
|   |   |   |   |   Child: 0  Const: 9 [line: 24]
|   |   |   Child: 1  Assign: = [line: 25]
|   |   |   |   Child: 0  Id: a [line: 25]
|   |   |   |   Child: 1  Assign: += [line: 25]
|   |   |   |   |   Child: 0  Id: grand [line: 25]
|   |   |   |   |   Child: 1  Assign: -= [line: 25]
|   |   |   |   |   |   Child: 0  Id: day [line: 25]
|   |   |   |   |   |   Child: 1  Id: out [line: 25]
|   |   |Sibling: 12  Assign: = [line: 27]
|   |   |   Child: 0  Id: close [line: 27]
|   |   |   Child: 1  Op: & [line: 27]
|   |   |   |   Child: 0  Op: < [line: 27]
|   |   |   |   |   Child: 0  Op: + [line: 27]
|   |   |   |   |   |   Child: 0  Op: * [line: 27]
|   |   |   |   |   |   |   Child: 0  Op: - [line: 27]
|   |   |   |   |   |   |   |   Child: 0  Const: 1 [line: 27]
|   |   |   |   |   |   |   Child: 1  Const: 2 [line: 27]
|   |   |   |   |   |   Child: 1  Const: 3 [line: 27]
|   |   |   |   |   Child: 1  Op: * [line: 27]
|   |   |   |   |   |   Child: 0  Const: 4 [line: 27]
|   |   |   |   |   |   Child: 1  Const: 5 [line: 27]
|   |   |   |   Child: 1  Op: > [line: 27]
|   |   |   |   |   Child: 0  Op: + [line: 27]
|   |   |   |   |   |   Child: 0  Const: 6 [line: 27]
|   |   |   |   |   |   Child: 1  Const: 7 [line: 27]
|   |   |   |   |   Child: 1  Op: - [line: 27]
|   |   |   |   |   |   Child: 0  Const: 3 [line: 27]
|   |   |Sibling: 13  Assign: = [line: 28]
|   |   |   Child: 0  Id: shave [line: 28]
|   |   |   Child: 1  Op: | [line: 28]
|   |   |   |   Child: 0  Const: true [line: 28]
|   |   |   |   Child: 1  Op: & [line: 28]
|   |   |   |   |   Child: 0  Op: < [line: 28]
|   |   |   |   |   |   Child: 0  Op: - [line: 28]
|   |   |   |   |   |   |   Child: 0  Op: * [line: 28]
|   |   |   |   |   |   |   |   Child: 0  Const: 1 [line: 28]
|   |   |   |   |   |   |   |   Child: 1  Op: + [line: 28]
|   |   |   |   |   |   |   |   |   Child: 0  Const: 2 [line: 28]
|   |   |   |   |   |   |   |   |   Child: 1  Const: 3 [line: 28]
|   |   |   |   |   |   Child: 1  Op: * [line: 28]
|   |   |   |   |   |   |   Child: 0  Const: 4 [line: 28]
|   |   |   |   |   |   |   Child: 1  Const: 5 [line: 28]
|   |   |   |   |   Child: 1  Op: > [line: 28]
|   |   |   |   |   |   Child: 0  Op: + [line: 28]
|   |   |   |   |   |   |   Child: 0  Const: 6 [line: 28]
|   |   |   |   |   |   |   Child: 1  Const: 7 [line: 28]
|   |   |   |   |   |   Child: 1  Op: - [line: 28]
|   |   |   |   |   |   |   Child: 0  Const: 3 [line: 28]
|   |   |Sibling: 14  If [line: 29]
|   |   |   Child: 0  Op: != [line: 29]
|   |   |   |   Child: 0  Id: shave [line: 29]
|   |   |   |   Child: 1  Id: close [line: 29]
|   |   |   Child: 1  Assign: = [line: 29]
|   |   |   |   Child: 0  Id: shave [line: 29]
|   |   |   |   Child: 1  Op: ! [line: 29]
|   |   |   |   |   Child: 0  Id: close [line: 29]
|   |   |Sibling: 15  If [line: 30]
|   |   |   Child: 0  Op: | [line: 30]
|   |   |   |   Child: 0  Op: ! [line: 30]
|   |   |   |   |   Child: 0  Op: == [line: 30]
|   |   |   |   |   |   Child: 0  Id: shave [line: 30]
|   |   |   |   |   |   Child: 1  Id: close [line: 30]
|   |   |   |   Child: 1  Op: ! [line: 30]
|   |   |   |   |   Child: 0  Id: close [line: 30]
|   |   |   Child: 1  Assign: = [line: 30]
|   |   |   |   Child: 0  Id: shave [line: 30]
|   |   |   |   Child: 1  Const: true [line: 30]
|   |   |   Child: 2  Assign: = [line: 31]
|   |   |   |   Child: 0  Id: close [line: 31]
|   |   |   |   Child: 1  Const: false [line: 31]
|   |   |Sibling: 16  While [line: 32]
|   |   |   Child: 0  Id: shave [line: 32]
|   |   |   Child: 1  Compound [line: 32]
|   |   |   |   Child: 0  Var were of type int [line: 33]
|   |   |   |   |Sibling: 1  Var rabbit of type int [line: 33]
|   |   |   |   |Sibling: 2  Var sheep is array of type int [line: 34]
|   |   |   |   Child: 1  Assign: = [line: 36]
|   |   |   |   |   Child: 0  Id: sheep [line: 36]
|   |   |   |   |   |   Child: 0  Const: 2 [line: 36]
|   |   |   |   |   Child: 1  Const: 1618 [line: 36]
|   |   |   |   |Sibling: 1  If [line: 37]
|   |   |   |   |   Child: 0  Op: < [line: 37]
|   |   |   |   |   |   Child: 0  Id: sheep [line: 37]
|   |   |   |   |   |   |   Child: 0  Const: 2 [line: 37]
|   |   |   |   |   |   Child: 1  Const: 496 [line: 37]
|   |   |   |   |   Child: 1  Break [line: 37]
|   |   |   |   |Sibling: 2  Call: wallace [line: 38]
|   |   |   |   |   Child: 0  Assign: -- [line: 38]
|   |   |   |   |   |   Child: 0  Id: gromit [line: 38]
|   |   |   |   |   |Sibling: 1  Op: - [line: 38]
|   |   |   |   |   |   Child: 0  Id: were [line: 38]
|   |   |   |   |   |   Child: 1  Id: rabbit [line: 38]
|   |   |   |   |Sibling: 3  Compound [line: 39]
|   |   |   |   |   Child: 0  Var the of type int [line: 40]
|   |   |   |   |   |Sibling: 1  Var wrong of type int [line: 40]
|   |   |   |   |   |Sibling: 2  Var trousers of type int [line: 40]
|   |   |   |   |   Child: 1  Assign: = [line: 42]
|   |   |   |   |   |   Child: 0  Id: the [line: 42]
|   |   |   |   |   |   Child: 1  Assign: += [line: 42]
|   |   |   |   |   |   |   Child: 0  Id: wrong [line: 42]
|   |   |   |   |   |   |   Child: 1  Assign: ++ [line: 42]
|   |   |   |   |   |   |   |   Child: 0  Id: trousers [line: 42]
|   |   |   |   |   |Sibling: 1  If [line: 43]
|   |   |   |   |   |   Child: 0  Op: == [line: 43]
|   |   |   |   |   |   |   Child: 0  Id: were [line: 43]
|   |   |   |   |   |   |   Child: 1  Id: rabbit [line: 43]
|   |   |   |   |   |   Child: 1  Assign: = [line: 43]
|   |   |   |   |   |   |   Child: 0  Id: were [line: 43]
|   |   |   |   |   |   |   Child: 1  Assign: -- [line: 43]
|   |   |   |   |   |   |   |   Child: 0  Id: wrong [line: 43]
|   |   |Sibling: 17  Return [line: 46]
|Sibling: 2  Func penguin returns type bool [line: 50]
|   Child: 0  Param Feathers of type char [line: 50]
|   |Sibling: 1  Param McGraw is array of type char [line: 50]
|   |Sibling: 2  Param moon of type bool [line: 50]
|   |Sibling: 3  Param cheese of type bool [line: 50]
|   |Sibling: 4  Param launch of type int [line: 50]
|   Child: 1  Compound [line: 51]
|   |   Child: 0  Var tottington of type char [line: 52]
|   |   |   Child: 0  Const: 'x' [line: 52]
|   |   |Sibling: 1  Var Wensleydale is array of type char [line: 53]
|   |   |   Child: 0  Const: "cheeeeeese" [line: 53]
|   |   |Sibling: 2  Var c of type char [line: 54]
|   |   |Sibling: 3  Var i of type int [line: 55]
|   |   Child: 1  Assign: = [line: 57]
|   |   |   Child: 0  Id: tottington [line: 57]
|   |   |   Child: 1  Id: Feathers [line: 57]
|   |   |Sibling: 1  Assign: = [line: 58]
|   |   |   Child: 0  Id: McGraw [line: 58]
|   |   |   Child: 1  Id: Feathers [line: 58]
|   |   |Sibling: 2  Assign: = [line: 59]
|   |   |   Child: 0  Id: Wensleydale [line: 59]
|   |   |   Child: 1  Id: McGraw [line: 59]
|   |   |Sibling: 3  Assign: = [line: 60]
|   |   |   Child: 0  Id: Wensleydale [line: 60]
|   |   |   |   Child: 0  Op: * [line: 60]
|   |   |   |   |   Child: 0  Id: McGraw [line: 60]
|   |   |   Child: 1  Const: '*' [line: 60]
|   |   |Sibling: 4  Assign: = [line: 61]
|   |   |   Child: 0  Id: McGraw [line: 61]
|   |   |   Child: 1  Const: "A Matter of Loaf and Death" [line: 61]
|   |   |Sibling: 5  Compound [line: 63]
|   |   |   Child: 0  Var c of type char [line: 63]
|   |   |   |Sibling: 1  Var i of type int [line: 64]
|   |   |   Child: 1  Foreach [line: 65]
|   |   |   |   Child: 0  Id: c [line: 65]
|   |   |   |   Child: 1  Id: McGraw [line: 65]
|   |   |   |   Child: 2  If [line: 65]
|   |   |   |   |   Child: 0  Op: == [line: 65]
|   |   |   |   |   |   Child: 0  Id: c [line: 65]
|   |   |   |   |   |   Child: 1  Const: 'f' [line: 65]
|   |   |   |   |   Child: 1  Return [line: 65]
|   |   |   |   |   |   Child: 0  Const: true [line: 65]
|   |   |   |Sibling: 1  Foreach [line: 66]
|   |   |   |   Child: 0  Id: i [line: 66]
|   |   |   |   Child: 1  Op: * [line: 66]
|   |   |   |   |   Child: 0  Id: McGraw [line: 66]
|   |   |   |   Child: 2  If [line: 66]
|   |   |   |   |   Child: 0  Op: == [line: 66]
|   |   |   |   |   |   Child: 0  Id: McGraw [line: 66]
|   |   |   |   |   |   |   Child: 0  Id: i [line: 66]
|   |   |   |   |   |   Child: 1  Const: 'f' [line: 66]
|   |   |   |   |   Child: 1  Return [line: 66]
|   |   |   |   |   |   Child: 0  Const: true [line: 66]
|Sibling: 3  Func Wendolene returns type int [line: 70]
|   Child: 0  Param wool of type int [line: 70]
|   |Sibling: 1  Param shaun of type bool [line: 70]
|   |Sibling: 2  Param yarn is array of type int [line: 70]
|   |Sibling: 3  Param preston is array of type bool [line: 70]
|   Child: 1  Compound [line: 71]
|   |   Child: 0  Var void of type int [line: 72]
|   |   Child: 1  Return [line: 73]
|   |   |   Child: 0  Op: + [line: 73]
|   |   |   |   Child: 0  Op: + [line: 73]
|   |   |   |   |   Child: 0  Op: + [line: 73]
|   |   |   |   |   |   Child: 0  Id: wool [line: 73]
|   |   |   |   |   |   Child: 1  Id: yarn [line: 73]
|   |   |   |   |   |   |   Child: 0  Const: 0 [line: 73]
|   |   |   |   |   Child: 1  Op: * [line: 73]
|   |   |   |   |   |   Child: 0  Id: yarn [line: 73]
|   |   |   |   Child: 1  Id: yarn [line: 73]
|   |   |   |   |   Child: 0  Op: * [line: 73]
|   |   |   |   |   |   Child: 0  Const: 7 [line: 73]
|   |   |   |   |   |   Child: 1  Id: wool [line: 73]
|Sibling: 4  Func ramsBottom returns type bool [line: 77]
|   Child: 1  Compound [line: 78]
|   |   Child: 0  Var chicken is array of type int [line: 79]
|   |   |Sibling: 1  Var run is array of type bool [line: 80]
|   |   |Sibling: 2  Var wallace is array of type int [line: 81]
|   |   |Sibling: 3  Var gromit is array of type int [line: 81]
|   |   Child: 1  Op: * [line: 83]
|   |   |   Child: 0  Const: 42 [line: 83]
|   |   |   Child: 1  Call: Wendolene [line: 83]
|   |   |   |   Child: 0  Op: + [line: 83]
|   |   |   |   |   Child: 0  Op: + [line: 83]
|   |   |   |   |   |   Child: 0  Const: 1 [line: 83]
|   |   |   |   |   |   Child: 1  Const: 2 [line: 83]
|   |   |   |   |   Child: 1  Const: 3 [line: 83]
|   |   |   |   |Sibling: 1  Op: | [line: 83]
|   |   |   |   |   Child: 0  Op: ! [line: 83]
|   |   |   |   |   |   Child: 0  Const: true [line: 83]
|   |   |   |   |   Child: 1  Op: & [line: 83]
|   |   |   |   |   |   Child: 0  Const: true [line: 83]
|   |   |   |   |   |   Child: 1  Const: false [line: 83]
|   |   |   |   |Sibling: 2  Id: chicken [line: 83]
|   |   |   |   |Sibling: 3  Id: run [line: 83]
|   |   |Sibling: 1  Id: run [line: 84]
|   |   |   Child: 0  Op: - [line: 84]
|   |   |   |   Child: 0  Op: * [line: 84]
|   |   |   |   |   Child: 0  Id: run [line: 84]
|   |   |   |   Child: 1  Const: 1 [line: 84]
|   |   |Sibling: 2  Return [line: 86]
|   |   |   Child: 0  Op: ! [line: 86]
|   |   |   |   Child: 0  Op: >= [line: 86]
|   |   |   |   |   Child: 0  Id: wallace [line: 86]
|   |   |   |   |   |   Child: 0  Const: 1 [line: 86]
|   |   |   |   |   Child: 1  Op: * [line: 86]
|   |   |   |   |   |   Child: 0  Op: - [line: 86]
|   |   |   |   |   |   |   Child: 0  Id: gromit [line: 86]
|   |   |   |   |   |   |   |   Child: 0  Const: 2 [line: 86]
|   |   |   |   |   |   Child: 1  Const: 3 [line: 86]
|Sibling: 5  Func cheese returns type int [line: 89]
|   Child: 0  Param x of type int [line: 89]
|   |Sibling: 1  Param y of type int [line: 89]
|   Child: 1  While [line: 89]
|   |   Child: 0  Op: > [line: 89]
|   |   |   Child: 0  Id: x [line: 89]
|   |   |   Child: 1  Const: 0 [line: 89]
|   |   Child: 1  If [line: 89]
|   |   |   Child: 0  Op: > [line: 89]
|   |   |   |   Child: 0  Id: y [line: 89]
|   |   |   |   Child: 1  Const: 3 [line: 89]
|   |   |   Child: 1  Assign: -- [line: 89]
|   |   |   |   Child: 0  Id: x [line: 89]
|   |   |   Child: 2  Return [line: 89]
|   |   |   |   Child: 0  Op: % [line: 89]
|   |   |   |   |   Child: 0  Op: * [line: 89]
|   |   |   |   |   |   Child: 0  Id: x [line: 89]
|   |   |   |   |   |   Child: 1  Id: x [line: 89]
|   |   |   |   |   Child: 1  Id: y [line: 89]
|Sibling: 6  Func Wensleydale returns type int [line: 91]
|   Child: 0  Param x of type int [line: 91]
|   |Sibling: 1  Param y of type int [line: 91]
|   Child: 1  Return [line: 91]
|   |   Child: 0  Call: cheese [line: 91]
|   |   |   Child: 0  Id: x [line: 91]
|   |   |   |Sibling: 1  Id: gromit [line: 91]
|Sibling: 7  Func main returns type int [line: 93]
|   Child: 1  Compound [line: 94]
|   |   Child: 0  Var wool of type int [line: 95]
|   |   |Sibling: 1  Var yarn is array of type int [line: 95]
|   |   |Sibling: 2  Var shaun of type bool [line: 96]
|   |   |Sibling: 3  Var preston is array of type bool [line: 96]
|   |   Child: 1  Call: wallace [line: 98]
|   |   |   Child: 0  Call: cheese [line: 98]
|   |   |   |   Child: 0  Const: 62 [line: 98]
|   |   |   |   |Sibling: 1  Op: - [line: 98]
|   |   |   |   |   Child: 0  Const: 311 [line: 98]
|   |   |   |Sibling: 1  Id: gromit [line: 98]
|   |   |Sibling: 1  Return [line: 99]
|   |   |   Child: 0  Call: Wendolene [line: 99]
|   |   |   |   Child: 0  Op: * [line: 99]
|   |   |   |   |   Child: 0  Op: * [line: 99]
|   |   |   |   |   |   Child: 0  Id: preston [line: 99]
|   |   |   |   |   Child: 1  Op: * [line: 99]
|   |   |   |   |   |   Child: 0  Id: yarn [line: 99]
|   |   |   |   |Sibling: 1  Id: shaun [line: 99]
|   |   |   |   |Sibling: 2  Id: yarn [line: 99]
|   |   |   |   |Sibling: 3  Id: preston [line: 99]
|Sibling: 8  Var aBigLongVariableName6 of type bool [line: 102]
|Sibling: 9  Var odd of type int [line: 103]
|Sibling: 10  Var separation of type int [line: 103]
|Sibling: 11  Var of of type int [line: 103]
|Sibling: 12  Var stuff of type int [line: 104]
|Sibling: 13  Var ant is array of type char [line: 106]
|   Child: 0  Const: ""'" [line: 106]
|Sibling: 14  Var bat of type char [line: 107]
|   Child: 0  Const: "'" [line: 107]
|Sibling: 15  Var cat is array of type char [line: 108]
|   Child: 0  Const: "t
" [line: 108]
|Sibling: 16  Var dog of type char [line: 109]
|   Child: 0  Const: 't' [line: 109]
Number of warnings: 0
Number of errors: 0
