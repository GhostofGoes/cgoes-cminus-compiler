// C-F15
//
// Test all the basic elements of C-
//
//
bool gromit;

wallace(bool wrong, trousers)
{
    char close[13]:true, shave:false;
   
    1729;
    close;
    11*22+33*44;
    close = shave;
    wrong = trousers % (666/wrong);
    gromit = wrong * trousers - gromit + -42;
    gromit += 27182818;
    gromit -= -31415927;
    gromit /= (wrong *= 42);
    close = wrong < trousers & trousers <= gromit;
    shave = wrong > trousers & trousers >= gromit;
    {
        bool a, grand:1/2, day:3*4, out:-9;
        a = grand += day -= out;
    }
    close = -1*2+3<4*5 & 6+7>-3;
    shave = true | ((-(1*(2+3)))<(4*5) & ((6+7)>(-3)));
    if (shave != close) shave = !  close;
    if (! (shave == close)  |  ! close) shave = true;
    else close = false;
    while (shave) {
        static bool were, rabbit[13];
        static bool sheep[10];

        sheep[2] = 1618;
        if (sheep[2]<496) break;
        wallace(gromit--, were-rabbit);
        { 
            bool the, wrong, trousers;

            the = wrong += trousers++;
            if (were == rabbit) were = wrong--;  // assignment is in test
        }
    }
    return;
}       


char penguin(int Feathers, McGraw[]; char moon, cheese; bool launch) 
{
    static int tottington:'x';
    int  Wensleydale:"cheeeeeese";
    int c[13];
    bool i;         

    tottington = Feathers;
    McGraw[3] = Feathers;
    Wensleydale = McGraw;
    Wensleydale[*McGraw] = '*';
    McGraw = "A Matter of Loaf and Death";

    { int c;
      bool i;
        foreach (c in McGraw) if (c=='f') return true;
        foreach (i in *McGraw) if (McGraw[i]=='f') break;
    }
}        

bool Wendolene(bool wool; char shaun; bool yarn[]; char preston[])
{
    bool void;
    return wool + yarn[0] + *yarn + yarn[7*wool];
}


char ramsBottom()
{
    bool chicken[2];
    char run[3];
    bool wallace[2], gromit[3];

    42 * Wendolene(1+2+3, ! true | true & false, chicken, run);
    run[*run-1];

    return ! wallace[1]>=-gromit[2]*3;
}

bool cheese(bool x, y) while (x>0) if (y>3) x--; else return x*x%y;

bool Wensleydale(bool x; bool y) return cheese(x, gromit);  // weird parm list

bool main()
{
    bool wool, yarn[113];
    char shaun, preston[22];

    wallace(cheese(62, -311), gromit);
    yarn[?*yarn];
    return Wendolene(*preston**yarn, shaun, yarn, preston);
}

null();
MrNobody(bool shaun, the, sheep);

char aBigLongVariableName6;
bool    odd  ,	separation 		,of,
stuff ;

int ant[10]:"\"'";
int bat:'\'';
int cat[10]:"\t\n\0\\";
int dog:'\t';

