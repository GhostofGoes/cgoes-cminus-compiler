ERROR(22): Symbol 'dog' is already defined at line 11.
ERROR(36): Symbol 'cat' is already defined at line 29.
ERROR(57): Symbol 'x' is already defined at line 56.
ERROR(58): Symbol 'x' is already defined at line 56.
ERROR(19): Function 'dog' at line 11 is expecting to return type char but got int.
ERROR(22): Symbol 'dog' is already defined at line 11.
WARNING(22): Expecting to return type int but function 'dog' has no return statement.
ERROR(33): Function 'cat' at line 29 is expecting to return type char but return has no return value.
ERROR(36): Symbol 'cat' is already defined at line 29.
ERROR(42): Function 'ibex' at line 39 is expecting to return type int but got bool.
ERROR(47): Function 'ox' at line 45 is expecting no return value, but return has return value.
ERROR(57): Symbol 'x' is already defined at line 56.
ERROR(58): Symbol 'x' is already defined at line 56.
ERROR(67): Symbol 'v' is not defined.
ERROR(69): Expecting Boolean test condition in if statement but got type char.
ERROR(70): Expecting Boolean test condition in while statement but got type char.
ERROR(71): Expecting Boolean test condition in while statement but got type void.
ERROR(74): '=' requires operands of the same type but lhs is type char and rhs is int.
ERROR(75): '+=' requires operands of type int but lhs is of type char.
ERROR(76): '-=' requires operands of type int but rhs is of type char.
ERROR(80): Cannot use array as test condition in if statement.
ERROR(81): Cannot use array as test condition in while statement.
ERROR(83): Cannot have a break statement outside of loop.
ERROR(85): Expecting Boolean test condition in while statement but got type int.
ERROR(87): '+' requires that if one operand is an array so must the other operand.
ERROR(87): '+' requires operands of type int but lhs is of type char.
ERROR(87): '+' requires that if one operand is an array so must the other operand.
ERROR(88): The operation '<' does not work with arrays.
ERROR(89): The operation '<' does not work with arrays.
ERROR(91): '==' requires operands of the same type but lhs is type char and rhs is bool.
ERROR(92): '==' requires operands of the same type but lhs is type char and rhs is int.
ERROR(93): '==' requires operands of the same type but lhs is type int and rhs is bool.
ERROR(95): '+' requires operands of type int but lhs is of type bool.
ERROR(95): '+' requires operands of type int but rhs is of type char.
ERROR(97): '*' requires operands of type int but lhs is of type char.
ERROR(97): '*' requires operands of type int but rhs is of type bool.
ERROR(99): Unary '!' requires an operand of type bool but was given char.
ERROR(100): Unary '!' requires an operand of type bool but was given int.
ERROR(100): '+' requires operands of type int but lhs is of type char.
ERROR(103): Cannot index nonarray 'x'.
ERROR(104): '=' requires operands of the same type but lhs is type int and rhs is bool.
ERROR(104): '==' requires operands of the same type but lhs is type char and rhs is int.
ERROR(104): '+' requires operands of type int but lhs is of type char.
ERROR(104): '*' requires operands of type int but lhs is of type char.
ERROR(104): '*' requires operands of type int but rhs is of type bool.
ERROR(105): '=' requires operands of the same type but lhs is type int and rhs is bool.
ERROR(105): '==' requires operands of the same type but lhs is type char and rhs is int.
ERROR(105): '+' requires operands of type int but lhs is of type char.
ERROR(105): '*' requires operands of type int but lhs is of type char.
ERROR(105): '*' requires operands of type int but rhs is of type bool.
ERROR(105): Symbol 'y' is not defined.
ERROR(106): '=' requires operands of the same type but lhs is type int and rhs is bool.
ERROR(106): '*' requires operands of type int but lhs is of type char.
ERROR(106): '*' requires operands of type int but rhs is of type bool.
ERROR(108): The operation '*' only works with arrays.
ERROR(115): Array 'aa' should be indexed by type int but got char.
ERROR(117): Array index is the unindexed array 'aa'.
ERROR(118): Symbol 'AA' is not defined.
ERROR(120): Array 'aa' should be indexed by type int but got undefined type.
ERROR(120): Symbol 'meerkat' is not defined.
ERROR(122): Symbol 'xyzzy' is not defined.
ERROR(124): '/' requires operands of type int but lhs is of type undefined type.
ERROR(124): Symbol 'xyzzy' is not defined.
ERROR(126): Unary '!' requires an operand of type bool but was given int.
ERROR(126): Unary '-' requires an operand of type int but was given bool.
ERROR(126): Symbol 'uu' is not defined.
ERROR(126): Symbol 'y' is not defined.
ERROR(126): '+' requires operands of type int but lhs is of type char.
ERROR(126): '*' requires operands of type int but lhs is of type char.
ERROR(140): Cannot index nonarray 'ibex'.
ERROR(145): Array 'aa' should be indexed by type int but got char.
ERROR(146): Array 'aa' should be indexed by type int but got char.
ERROR(147): Array 'aa' should be indexed by type int but got void.
ERROR(149): '=' requires operands of the same type but lhs is type char and rhs is void.
ERROR(150): '=' requires operands of the same type but lhs is type char and rhs is int.
ERROR(150): '+' requires operands of type int but lhs is of type char.
ERROR(150): '+' requires operands of type int but rhs is of type void.
ERROR(155): '=' requires operands of the same type but lhs is type char and rhs is void.
ERROR(155): '=' requires operands of the same type but lhs is type char and rhs is bool.
ERROR(156): '=' requires operands of the same type but lhs is type int and rhs is void.
ERROR(157): '=' requires operands of the same type but lhs is type char and rhs is void.
ERROR(157): '=' requires operands of the same type but lhs is type int and rhs is void.
ERROR(157): '=' requires operands of the same type but lhs is type char and rhs is int.
ERROR(159): '*' requires operands of type int but lhs is of type char.
ERROR(159): '*' requires operands of type int but rhs is of type char.
ERROR(161): '+' requires operands of type int but lhs is of type char.
ERROR(161): Symbol 'parrot' is not defined.
ERROR(162): '+' requires operands of type int but lhs is of type char.
ERROR(162): Symbol 'parrot' is not defined.
ERROR(162): '*' requires operands of type int but lhs is of type char.
ERROR(166): If not an array, foreach requires rhs of 'in' be of type int but it is type bool.
ERROR(166): Foreach requires operands of 'in' be the same type but lhs is type int and rhs array is type bool.
ERROR(167): In foreach statement the variable to the left of 'in' must not be an array.
ERROR(167): Foreach requires operands of 'in' be the same type but lhs is type char and rhs array is type int.
ERROR(170): In foreach statement the variable to the left of 'in' must not be an array.
ERROR(171): If not an array, foreach requires lhs of 'in' be of type int but it is type char.
ERROR(171): If not an array, foreach requires rhs of 'in' be of type int but it is type bool.
ERROR(171): Foreach requires operands of 'in' be the same type but lhs is type char and rhs array is type bool.
ERROR(173): Cannot return an array.
Func input returns type int [line: -1]
|Sibling: 1  Func output returns type void [line: -1]
|   Child: 0  Param *dummy* int [line: -1]
|Sibling: 2  Func inputb returns type bool [line: -1]
|Sibling: 3  Func outputb returns type void [line: -1]
|   Child: 0  Param *dummy* bool [line: -1]
|Sibling: 4  Func inputc returns type char [line: -1]
|Sibling: 5  Func outputc returns type void [line: -1]
|   Child: 0  Param *dummy* char [line: -1]
|Sibling: 6  Func outnl returns type void [line: -1]
|Sibling: 7  Func dog returns type char [line: 11]
|   Child: 0  Param x char [line: 11]
|   Child: 1  Compound [line: 12]
|   |   Child: 0  Var x char [line: 13]
|   |   |Sibling: 1  Var b int [line: 15]
|   |   Child: 1  Call: cat Type: undefined type [line: 17]
|   |   |   Child: 0  Const: 10 Type: int [line: 17]
|   |   |Sibling: 1  Return [line: 19]
|   |   |   Child: 0  Id: b Type: int [line: 19]
|Sibling: 8  Func dog returns type int [line: 22]
|   Child: 0  Param x int [line: 22]
|   Child: 1  Compound [line: 23]
|   |   Child: 0  Compound [line: 24]
|   |   |   Child: 0  Var x int [line: 25]
|Sibling: 9  Func cat returns type char [line: 29]
|   Child: 0  Param x char [line: 29]
|   Child: 1  Compound [line: 30]
|   |   Child: 0  Var b int [line: 31]
|   |   Child: 1  Return [line: 33]
|Sibling: 10  Var cat char [line: 36]
|Sibling: 11  Var unusedGlobal char [line: 37]
|Sibling: 12  Func ibex returns type int [line: 39]
|   Child: 0  Param x is array of  char [line: 39]
|   Child: 1  Compound [line: 40]
|   |   Child: 0  Var unusedLocal char [line: 41]
|   |   Child: 1  Return [line: 42]
|   |   |   Child: 0  Const: true Type: bool [line: 42]
|Sibling: 13  Func ox returns type void [line: 45]
|   Child: 0  Param y char [line: 45]
|   Child: 1  Compound [line: 46]
|   |   Child: 0  Return [line: 47]
|   |   |   Child: 0  Const: 666 Type: int [line: 47]
|Sibling: 14  Func emu returns type char [line: 50]
|   Child: 0  Param x char [line: 50]
|   |Sibling: 1  Param y char [line: 50]
|   |Sibling: 2  Param z char [line: 50]
|   Child: 1  Compound [line: 51]
|Sibling: 15  Func main returns type char [line: 54]
|   Child: 0  Compound [line: 55]
|   |   Child: 0  Var x char [line: 56]
|   |   |Sibling: 1  Var yuri char [line: 56]
|   |   |Sibling: 2  Var x char [line: 57]
|   |   |Sibling: 3  Var x int [line: 58]
|   |   |Sibling: 4  Var ba is array of bool [line: 60]
|   |   |Sibling: 5  Var aa is array of char [line: 61]
|   |   |Sibling: 6  Var zz is array of char [line: 62]
|   |   |Sibling: 7  Var bb is array of int [line: 63]
|   |   |Sibling: 8  Var cc is array of int [line: 63]
|   |   |Sibling: 9  Var b int [line: 65]
|   |   |Sibling: 10  Var c int [line: 65]
|   |   Child: 1  Id: v Type: undefined type [line: 67]
|   |   |Sibling: 1  If [line: 69]
|   |   |   Child: 0  Id: x Type: char [line: 69]
|   |   |   Child: 1  Id: x Type: char [line: 69]
|   |   |Sibling: 2  While [line: 70]
|   |   |   Child: 0  Id: x Type: char [line: 70]
|   |   |   Child: 1  Id: x Type: char [line: 70]
|   |   |Sibling: 3  While [line: 71]
|   |   |   Child: 0  Call: ox Type: void [line: 71]
|   |   |   |   Child: 0  Const: 10 Type: int [line: 71]
|   |   |   Child: 1  Id: x Type: char [line: 71]
|   |   |Sibling: 4  Assign: = Type: void [line: 73]
|   |   |   Child: 0  Id: x Type: char [line: 73]
|   |   |   Child: 1  Id: cat Type: char [line: 73]
|   |   |Sibling: 5  Assign: = Type: void [line: 74]
|   |   |   Child: 0  Id: x Type: char [line: 74]
|   |   |   Child: 1  Id: b Type: int [line: 74]
|   |   |Sibling: 6  Assign: += Type: int [line: 75]
|   |   |   Child: 0  Id: x Type: char [line: 75]
|   |   |   Child: 1  Id: b Type: int [line: 75]
|   |   |Sibling: 7  Assign: -= Type: int [line: 76]
|   |   |   Child: 0  Id: b Type: int [line: 76]
|   |   |   Child: 1  Id: x Type: char [line: 76]
|   |   |Sibling: 8  Op: > Type: bool [line: 77]
|   |   |   Child: 0  Id: b Type: int [line: 77]
|   |   |   Child: 1  Id: x Type: char [line: 77]
|   |   |Sibling: 9  Assign: ++ Type: int [line: 78]
|   |   |   Child: 0  Id: b Type: int [line: 78]
|   |   |Sibling: 10  If [line: 80]
|   |   |   Child: 0  Id: bb Type: is array of int [line: 80]
|   |   |   Child: 1  Id: x Type: char [line: 80]
|   |   |Sibling: 11  While [line: 81]
|   |   |   Child: 0  Id: bb Type: is array of int [line: 81]
|   |   |   Child: 1  Id: x Type: char [line: 81]
|   |   |Sibling: 12  Break [line: 83]
|   |   |Sibling: 13  While [line: 85]
|   |   |   Child: 0  Id: b Type: int [line: 85]
|   |   |   Child: 1  Compound [line: 85]
|   |   |   |   Child: 0  Break [line: 85]
|   |   |Sibling: 14  Op: + Type: int [line: 87]
|   |   |   Child: 0  Id: aa Type: is array of char [line: 87]
|   |   |   Child: 1  Const: 6 Type: int [line: 87]
|   |   |Sibling: 15  Op: < Type: bool [line: 88]
|   |   |   Child: 0  Id: aa Type: is array of char [line: 88]
|   |   |   Child: 1  Id: zz Type: is array of char [line: 88]
|   |   |Sibling: 16  Op: < Type: bool [line: 89]
|   |   |   Child: 0  Id: bb Type: is array of int [line: 89]
|   |   |   Child: 1  Id: cc Type: is array of int [line: 89]
|   |   |Sibling: 17  Op: == Type: bool [line: 91]
|   |   |   Child: 0  Id: x Type: char [line: 91]
|   |   |   Child: 1  Const: true Type: bool [line: 91]
|   |   |Sibling: 18  Op: == Type: bool [line: 92]
|   |   |   Child: 0  Id: x Type: char [line: 92]
|   |   |   Child: 1  Const: 1 Type: int [line: 92]
|   |   |Sibling: 19  Op: == Type: bool [line: 93]
|   |   |   Child: 0  Id: b Type: int [line: 93]
|   |   |   Child: 1  Const: true Type: bool [line: 93]
|   |   |Sibling: 20  Op: + Type: int [line: 95]
|   |   |   Child: 0  Const: false Type: bool [line: 95]
|   |   |   Child: 1  Id: x Type: char [line: 95]
|   |   |Sibling: 21  Op: * Type: int [line: 97]
|   |   |   Child: 0  Id: x Type: char [line: 97]
|   |   |   Child: 1  Const: false Type: bool [line: 97]
|   |   |Sibling: 22  Op: ! Type: bool [line: 99]
|   |   |   Child: 0  Id: x Type: char [line: 99]
|   |   |Sibling: 23  Op: ! Type: bool [line: 100]
|   |   |   Child: 0  Op: + Type: int [line: 100]
|   |   |   |   Child: 0  Id: x Type: char [line: 100]
|   |   |   |   Child: 1  Id: b Type: int [line: 100]
|   |   |Sibling: 24  Op: - Type: int [line: 101]
|   |   |   Child: 0  Id: b Type: int [line: 101]
|   |   |Sibling: 25  Id: x Type: char [line: 103]
|   |   |   Child: 0  Const: 496 Type: int [line: 103]
|   |   |Sibling: 26  Assign: = Type: void [line: 104]
|   |   |   Child: 0  Id: b Type: int [line: 104]
|   |   |   Child: 1  Op: == Type: bool [line: 104]
|   |   |   |   Child: 0  Id: x Type: char [line: 104]
|   |   |   |   Child: 1  Op: + Type: int [line: 104]
|   |   |   |   |   Child: 0  Id: x Type: char [line: 104]
|   |   |   |   |   Child: 1  Op: * Type: int [line: 104]
|   |   |   |   |   |   Child: 0  Id: x Type: char [line: 104]
|   |   |   |   |   |   Child: 1  Op: & Type: bool [line: 104]
|   |   |   |   |   |   |   Child: 0  Id: x Type: char [line: 104]
|   |   |   |   |   |   |   Child: 1  Id: x Type: char [line: 104]
|   |   |Sibling: 27  Assign: = Type: void [line: 105]
|   |   |   Child: 0  Id: b Type: int [line: 105]
|   |   |   Child: 1  Op: == Type: bool [line: 105]
|   |   |   |   Child: 0  Id: x Type: char [line: 105]
|   |   |   |   Child: 1  Op: + Type: int [line: 105]
|   |   |   |   |   Child: 0  Id: x Type: char [line: 105]
|   |   |   |   |   Child: 1  Op: * Type: int [line: 105]
|   |   |   |   |   |   Child: 0  Id: x Type: char [line: 105]
|   |   |   |   |   |   Child: 1  Op: & Type: bool [line: 105]
|   |   |   |   |   |   |   Child: 0  Id: x Type: char [line: 105]
|   |   |   |   |   |   |   Child: 1  Id: y Type: undefined type [line: 105]
|   |   |Sibling: 28  Assign: = Type: void [line: 106]
|   |   |   Child: 0  Id: b Type: int [line: 106]
|   |   |   Child: 1  Op: | Type: bool [line: 106]
|   |   |   |   Child: 0  Op: == Type: bool [line: 106]
|   |   |   |   |   Child: 0  Id: x Type: char [line: 106]
|   |   |   |   |   Child: 1  Id: x Type: char [line: 106]
|   |   |   |   Child: 1  Op: * Type: int [line: 106]
|   |   |   |   |   Child: 0  Id: x Type: char [line: 106]
|   |   |   |   |   Child: 1  Op: & Type: bool [line: 106]
|   |   |   |   |   |   Child: 0  Id: x Type: char [line: 106]
|   |   |   |   |   |   Child: 1  Id: x Type: char [line: 106]
|   |   |Sibling: 29  Op: * Type: int [line: 108]
|   |   |   Child: 0  Id: x Type: char [line: 108]
|   |   |Sibling: 30  Op: & Type: bool [line: 109]
|   |   |   Child: 0  Op: * Type: int [line: 109]
|   |   |   |   Child: 0  Id: aa Type: is array of char [line: 109]
|   |   |   Child: 1  Id: b Type: int [line: 109]
|   |   |Sibling: 31  Id: aa Type: is array of char [line: 110]
|   |   |   Child: 0  Op: * Type: int [line: 110]
|   |   |   |   Child: 0  Id: aa Type: is array of char [line: 110]
|   |   |Sibling: 32  Id: aa Type: is array of char [line: 111]
|   |   |   Child: 0  Const: 666 Type: int [line: 111]
|   |   |Sibling: 33  Id: aa Type: is array of char [line: 113]
|   |   |   Child: 0  Id: b Type: int [line: 113]
|   |   |Sibling: 34  Id: aa Type: is array of char [line: 115]
|   |   |   Child: 0  Id: cat Type: char [line: 115]
|   |   |Sibling: 35  Id: aa Type: is array of char [line: 117]
|   |   |   Child: 0  Id: aa Type: is array of char [line: 117]
|   |   |Sibling: 36  Id: AA Type: undefined type [line: 118]
|   |   |   Child: 0  Const: 1 Type: int [line: 118]
|   |   |Sibling: 37  Id: aa Type: is array of char [line: 120]
|   |   |   Child: 0  Id: meerkat Type: undefined type [line: 120]
|   |   |Sibling: 38  Id: xyzzy Type: undefined type [line: 122]
|   |   |Sibling: 39  Call: meerkat Type: undefined type [line: 123]
|   |   |Sibling: 40  Op: & Type: bool [line: 124]
|   |   |   Child: 0  Const: true Type: bool [line: 124]
|   |   |   Child: 1  Op: / Type: int [line: 124]
|   |   |   |   Child: 0  Id: xyzzy Type: undefined type [line: 124]
|   |   |   |   Child: 1  Const: 666 Type: int [line: 124]
|   |   |Sibling: 41  Call: flight Type: undefined type [line: 126]
|   |   |   Child: 0  Op: ! Type: bool [line: 126]
|   |   |   |   Child: 0  Const: 5 Type: int [line: 126]
|   |   |   |Sibling: 1  Op: - Type: int [line: 126]
|   |   |   |   Child: 0  Const: true Type: bool [line: 126]
|   |   |   |Sibling: 2  Id: uu Type: undefined type [line: 126]
|   |   |   |Sibling: 3  Id: y Type: undefined type [line: 126]
|   |   |   |Sibling: 4  Op: + Type: int [line: 126]
|   |   |   |   Child: 0  Id: x Type: char [line: 126]
|   |   |   |   Child: 1  Op: * Type: int [line: 126]
|   |   |   |   |   Child: 0  Id: x Type: char [line: 126]
|   |   |   |   |   Child: 1  Id: b Type: int [line: 126]
|   |   |Sibling: 42  Call: x Type: undefined type [line: 128]
|   |   |Sibling: 43  Call: dog Type: char [line: 130]
|   |   |   Child: 0  Const: 3 Type: int [line: 130]
|   |   |   |Sibling: 1  Const: 5 Type: int [line: 130]
|   |   |Sibling: 44  Call: ibex Type: int [line: 131]
|   |   |Sibling: 45  Call: dog Type: char [line: 133]
|   |   |   Child: 0  Const: true Type: bool [line: 133]
|   |   |Sibling: 46  Call: cat Type: char [line: 135]
|   |   |   Child: 0  Id: aa Type: is array of char [line: 135]
|   |   |Sibling: 47  Call: cat Type: char [line: 136]
|   |   |   Child: 0  Id: ba Type: is array of bool [line: 136]
|   |   |Sibling: 48  Call: ibex Type: int [line: 138]
|   |   |   Child: 0  Id: x Type: char [line: 138]
|   |   |Sibling: 49  Call: ibex Type: int [line: 139]
|   |   |   Child: 0  Id: bb Type: is array of int [line: 139]
|   |   |Sibling: 50  Id: ibex Type: int [line: 140]
|   |   |   Child: 0  Const: 3 Type: int [line: 140]
|   |   |Sibling: 51  Op: + Type: int [line: 142]
|   |   |   Child: 0  Id: ibex Type: int [line: 142]
|   |   |   Child: 1  Const: 4 Type: int [line: 142]
|   |   |Sibling: 52  Id: ibex Type: int [line: 143]
|   |   |Sibling: 53  Id: aa Type: is array of char [line: 145]
|   |   |   Child: 0  Id: zz Type: is array of char [line: 145]
|   |   |   |   Child: 0  Const: 1 Type: int [line: 145]
|   |   |Sibling: 54  Id: aa Type: is array of char [line: 146]
|   |   |   Child: 0  Id: zz Type: is array of char [line: 146]
|   |   |Sibling: 55  Id: aa Type: is array of char [line: 147]
|   |   |   Child: 0  Call: ox Type: void [line: 147]
|   |   |   |   Child: 0  Const: true Type: bool [line: 147]
|   |   |Sibling: 56  Assign: = Type: void [line: 149]
|   |   |   Child: 0  Id: x Type: char [line: 149]
|   |   |   Child: 1  Call: ox Type: void [line: 149]
|   |   |   |   Child: 0  Const: 28 Type: int [line: 149]
|   |   |Sibling: 57  Assign: = Type: void [line: 150]
|   |   |   Child: 0  Id: x Type: char [line: 150]
|   |   |   Child: 1  Op: + Type: int [line: 150]
|   |   |   |   Child: 0  Id: x Type: char [line: 150]
|   |   |   |   Child: 1  Call: ox Type: void [line: 150]
|   |   |   |   |   Child: 0  Const: 6 Type: int [line: 150]
|   |   |Sibling: 58  Call: cat Type: char [line: 151]
|   |   |   Child: 0  Call: ox Type: void [line: 151]
|   |   |   |   Child: 0  Const: 492 Type: int [line: 151]
|   |   |Sibling: 59  Call: cat Type: char [line: 152]
|   |   |   Child: 0  Const: true Type: bool [line: 152]
|   |   |Sibling: 60  Call: cat Type: char [line: 153]
|   |   |   Child: 0  Call: cat Type: char [line: 153]
|   |   |   |   Child: 0  Const: 492 Type: int [line: 153]
|   |   |Sibling: 61  Assign: = Type: void [line: 155]
|   |   |   Child: 0  Id: x Type: char [line: 155]
|   |   |   Child: 1  Assign: = Type: void [line: 155]
|   |   |   |   Child: 0  Id: x Type: char [line: 155]
|   |   |   |   Child: 1  Const: true Type: bool [line: 155]
|   |   |Sibling: 62  Assign: = Type: void [line: 156]
|   |   |   Child: 0  Id: b Type: int [line: 156]
|   |   |   Child: 1  Assign: = Type: void [line: 156]
|   |   |   |   Child: 0  Id: b Type: int [line: 156]
|   |   |   |   Child: 1  Const: 666 Type: int [line: 156]
|   |   |Sibling: 63  Assign: = Type: void [line: 157]
|   |   |   Child: 0  Id: x Type: char [line: 157]
|   |   |   Child: 1  Assign: = Type: void [line: 157]
|   |   |   |   Child: 0  Id: b Type: int [line: 157]
|   |   |   |   Child: 1  Assign: = Type: void [line: 157]
|   |   |   |   |   Child: 0  Id: x Type: char [line: 157]
|   |   |   |   |   Child: 1  Id: b Type: int [line: 157]
|   |   |Sibling: 64  Op: & Type: bool [line: 159]
|   |   |   Child: 0  Op: * Type: int [line: 159]
|   |   |   |   Child: 0  Id: x Type: char [line: 159]
|   |   |   |   Child: 1  Id: b Type: int [line: 159]
|   |   |   Child: 1  Op: * Type: int [line: 159]
|   |   |   |   Child: 0  Id: b Type: int [line: 159]
|   |   |   |   Child: 1  Id: x Type: char [line: 159]
|   |   |Sibling: 65  Call: emu Type: char [line: 161]
|   |   |   Child: 0  Op: + Type: int [line: 161]
|   |   |   |   Child: 0  Id: x Type: char [line: 161]
|   |   |   |   Child: 1  Id: b Type: int [line: 161]
|   |   |   |Sibling: 1  Id: parrot Type: undefined type [line: 161]
|   |   |   |Sibling: 2  Op: & Type: bool [line: 161]
|   |   |   |   Child: 0  Id: b Type: int [line: 161]
|   |   |   |   Child: 1  Id: x Type: char [line: 161]
|   |   |Sibling: 66  Call: emu Type: char [line: 162]
|   |   |   Child: 0  Const: false Type: bool [line: 162]
|   |   |   |Sibling: 1  Op: & Type: bool [line: 162]
|   |   |   |   Child: 0  Const: true Type: bool [line: 162]
|   |   |   |   Child: 1  Call: emu Type: char [line: 162]
|   |   |   |   |   Child: 0  Op: + Type: int [line: 162]
|   |   |   |   |   |   Child: 0  Id: x Type: char [line: 162]
|   |   |   |   |   |   Child: 1  Id: b Type: int [line: 162]
|   |   |   |   |   |Sibling: 1  Id: parrot Type: undefined type [line: 162]
|   |   |   |   |   |Sibling: 2  Op: & Type: bool [line: 162]
|   |   |   |   |   |   Child: 0  Id: b Type: int [line: 162]
|   |   |   |   |   |   Child: 1  Id: x Type: char [line: 162]
|   |   |   |Sibling: 2  Const: true Type: bool [line: 162]
|   |   |   |Sibling: 3  Op: * Type: int [line: 162]
|   |   |   |   Child: 0  Id: x Type: char [line: 162]
|   |   |   |   Child: 1  Id: b Type: int [line: 162]
|   |   |Sibling: 67  Id: bb Type: is array of int [line: 164]
|   |   |Sibling: 68  Foreach [line: 166]
|   |   |   Child: 0  Id: c Type: int [line: 166]
|   |   |   Child: 1  Const: true Type: bool [line: 166]
|   |   |   Child: 2  Id: x Type: char [line: 166]
|   |   |Sibling: 69  Foreach [line: 167]
|   |   |   Child: 0  Id: aa Type: is array of char [line: 167]
|   |   |   Child: 1  Const: 144 Type: int [line: 167]
|   |   |   Child: 2  Id: aa Type: is array of char [line: 167]
|   |   |   |   Child: 0  Const: 10 Type: int [line: 167]
|   |   |Sibling: 70  Foreach [line: 170]
|   |   |   Child: 0  Id: bb Type: is array of int [line: 170]
|   |   |   Child: 1  Const: 144 Type: int [line: 170]
|   |   |Sibling: 71  Foreach [line: 171]
|   |   |   Child: 0  Id: x Type: char [line: 171]
|   |   |   Child: 1  Id: ba Type: is array of bool [line: 171]
|   |   |Sibling: 72  Return [line: 173]
|   |   |   Child: 0  Id: aa Type: is array of char [line: 173]
