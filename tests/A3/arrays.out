ERROR(14): '=' requires operands of the same type but lhs is type int and rhs is char.
ERROR(15): '=' requires operands of the same type but lhs is type int and rhs is bool.
ERROR(18): '=' requires that if one operand is an array so must the other operand.
ERROR(19): '=' requires that if one operand is an array so must the other operand.
ERROR(20): '=' requires that if one operand is an array so must the other operand.
ERROR(21): '=' requires operands of the same type but lhs is type int and rhs is char.
ERROR(21): '=' requires that if one operand is an array so must the other operand.
ERROR(22): '=' requires operands of the same type but lhs is type int and rhs is bool.
ERROR(22): '=' requires that if one operand is an array so must the other operand.
ERROR(24): '=' requires that if one operand is an array so must the other operand.
ERROR(25): '=' requires that if one operand is an array so must the other operand.
ERROR(26): '=' requires that if one operand is an array so must the other operand.
ERROR(27): '=' requires operands of the same type but lhs is type int and rhs is char.
ERROR(27): '=' requires that if one operand is an array so must the other operand.
ERROR(28): '=' requires operands of the same type but lhs is type int and rhs is bool.
ERROR(28): '=' requires that if one operand is an array so must the other operand.
ERROR(30): The operation '>' does not work with arrays.
ERROR(31): The operation '<' does not work with arrays.
ERROR(32): The operation '>=' does not work with arrays.
ERROR(33): The operation '<=' does not work with arrays.
ERROR(37): The operation '>' does not work with arrays.
ERROR(38): The operation '>' does not work with arrays.
ERROR(40): The operation '?' does not work with arrays.
ERROR(41): Cannot index nonarray 'x'.
Func input returns type int [line: -1]
|Sibling: 1  Func output returns type void [line: -1]
|   Child: 0  Param *dummy* int [line: -1]
|Sibling: 2  Func inputb returns type bool [line: -1]
|Sibling: 3  Func outputb returns type void [line: -1]
|   Child: 0  Param *dummy* bool [line: -1]
|Sibling: 4  Func inputc returns type char [line: -1]
|Sibling: 5  Func outputc returns type void [line: -1]
|   Child: 0  Param *dummy* char [line: -1]
|Sibling: 6  Func outnl returns type void [line: -1]
|Sibling: 7  Func main returns type void [line: 1]
|   Child: 1  Compound [line: 2]
|   |   Child: 0  Var x int [line: 3]
|   |   |Sibling: 1  Var c char [line: 4]
|   |   |Sibling: 2  Var b bool [line: 5]
|   |   |Sibling: 3  Var xa is array of int [line: 6]
|   |   |Sibling: 4  Var ca is array of char [line: 7]
|   |   |Sibling: 5  Var ba is array of bool [line: 8]
|   |   |Sibling: 6  Var y int [line: 9]
|   |   |Sibling: 7  Var ya is array of int [line: 9]
|   |   Child: 1  Assign: = Type: int [line: 11]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 11]
|   |   |   Child: 1  Id: xa Type: is array of int [line: 11]
|   |   |Sibling: 1  Assign: = Type: char [line: 12]
|   |   |   Child: 0  Id: ca Type: is array of char [line: 12]
|   |   |   Child: 1  Id: ca Type: is array of char [line: 12]
|   |   |Sibling: 2  Assign: = Type: bool [line: 13]
|   |   |   Child: 0  Id: ba Type: is array of bool [line: 13]
|   |   |   Child: 1  Id: ba Type: is array of bool [line: 13]
|   |   |Sibling: 3  Assign: = Type: int [line: 14]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 14]
|   |   |   Child: 1  Id: ca Type: is array of char [line: 14]
|   |   |Sibling: 4  Assign: = Type: int [line: 15]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 15]
|   |   |   Child: 1  Id: ba Type: is array of bool [line: 15]
|   |   |Sibling: 5  Assign: = Type: char [line: 16]
|   |   |   Child: 0  Id: ca Type: is array of char [line: 16]
|   |   |   Child: 1  Const: "dogs" Type: is array of char [line: 16]
|   |   |Sibling: 6  Assign: = Type: int [line: 18]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 18]
|   |   |   Child: 1  Id: x Type: int [line: 18]
|   |   |Sibling: 7  Assign: = Type: char [line: 19]
|   |   |   Child: 0  Id: ca Type: is array of char [line: 19]
|   |   |   Child: 1  Id: c Type: char [line: 19]
|   |   |Sibling: 8  Assign: = Type: bool [line: 20]
|   |   |   Child: 0  Id: ba Type: is array of bool [line: 20]
|   |   |   Child: 1  Id: b Type: bool [line: 20]
|   |   |Sibling: 9  Assign: = Type: int [line: 21]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 21]
|   |   |   Child: 1  Id: c Type: char [line: 21]
|   |   |Sibling: 10  Assign: = Type: int [line: 22]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 22]
|   |   |   Child: 1  Id: b Type: bool [line: 22]
|   |   |Sibling: 11  Assign: = Type: int [line: 24]
|   |   |   Child: 0  Id: x Type: int [line: 24]
|   |   |   Child: 1  Id: xa Type: is array of int [line: 24]
|   |   |Sibling: 12  Assign: = Type: char [line: 25]
|   |   |   Child: 0  Id: c Type: char [line: 25]
|   |   |   Child: 1  Id: ca Type: is array of char [line: 25]
|   |   |Sibling: 13  Assign: = Type: bool [line: 26]
|   |   |   Child: 0  Id: b Type: bool [line: 26]
|   |   |   Child: 1  Id: ba Type: is array of bool [line: 26]
|   |   |Sibling: 14  Assign: = Type: int [line: 27]
|   |   |   Child: 0  Id: x Type: int [line: 27]
|   |   |   Child: 1  Id: ca Type: is array of char [line: 27]
|   |   |Sibling: 15  Assign: = Type: int [line: 28]
|   |   |   Child: 0  Id: x Type: int [line: 28]
|   |   |   Child: 1  Id: ba Type: is array of bool [line: 28]
|   |   |Sibling: 16  Op: > Type: bool [line: 30]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 30]
|   |   |   Child: 1  Id: xa Type: is array of int [line: 30]
|   |   |Sibling: 17  Op: < Type: bool [line: 31]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 31]
|   |   |   Child: 1  Id: xa Type: is array of int [line: 31]
|   |   |Sibling: 18  Op: >= Type: bool [line: 32]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 32]
|   |   |   Child: 1  Id: xa Type: is array of int [line: 32]
|   |   |Sibling: 19  Op: <= Type: bool [line: 33]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 33]
|   |   |   Child: 1  Id: xa Type: is array of int [line: 33]
|   |   |Sibling: 20  Op: == Type: bool [line: 34]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 34]
|   |   |   Child: 1  Id: xa Type: is array of int [line: 34]
|   |   |Sibling: 21  Op: != Type: bool [line: 35]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 35]
|   |   |   Child: 1  Id: xa Type: is array of int [line: 35]
|   |   |Sibling: 22  Op: > Type: bool [line: 37]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 37]
|   |   |   Child: 1  Id: x Type: int [line: 37]
|   |   |Sibling: 23  Op: > Type: bool [line: 38]
|   |   |   Child: 0  Id: x Type: int [line: 38]
|   |   |   Child: 1  Id: xa Type: is array of int [line: 38]
|   |   |Sibling: 24  Op: ? Type: int [line: 40]
|   |   |   Child: 0  Id: xa Type: is array of int [line: 40]
|   |   |Sibling: 25  Id: x Type: int [line: 41]
|   |   |   Child: 0  Const: 2 Type: int [line: 41]
|   |   |Sibling: 26  Id: xa Type: int [line: 42]
|   |   |   Child: 0  Const: 2 Type: int [line: 42]
Number of warnings: 0
Number of errors: 24
