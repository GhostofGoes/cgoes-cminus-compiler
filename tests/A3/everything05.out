Func input returns type int [line: -1]
|Sibling: 1  Func output returns type void [line: -1]
|   Child: 0  Param *dummy* int [line: -1]
|Sibling: 2  Func inputb returns type bool [line: -1]
|Sibling: 3  Func outputb returns type void [line: -1]
|   Child: 0  Param *dummy* bool [line: -1]
|Sibling: 4  Func inputc returns type char [line: -1]
|Sibling: 5  Func outputc returns type void [line: -1]
|   Child: 0  Param *dummy* char [line: -1]
|Sibling: 6  Func outnl returns type void [line: -1]
|Sibling: 7  Var gromit int [line: 6]
|Sibling: 8  Func wallace returns type void [line: 8]
|   Child: 0  Param wrong int [line: 8]
|   |Sibling: 1  Param trousers int [line: 8]
|   Child: 1  Compound [line: 9]
|   |   Child: 0  Var close bool [line: 10]
|   |   |   Child: 0  Const: true Type: bool [line: 10]
|   |   |Sibling: 1  Var shave bool [line: 10]
|   |   |   Child: 0  Const: false Type: bool [line: 10]
|   |   Child: 1  Const: 1729 Type: int [line: 12]
|   |   |Sibling: 1  Id: close Type: bool [line: 13]
|   |   |Sibling: 2  Op: + Type: int [line: 14]
|   |   |   Child: 0  Op: * Type: int [line: 14]
|   |   |   |   Child: 0  Const: 11 Type: int [line: 14]
|   |   |   |   Child: 1  Const: 22 Type: int [line: 14]
|   |   |   Child: 1  Op: * Type: int [line: 14]
|   |   |   |   Child: 0  Const: 33 Type: int [line: 14]
|   |   |   |   Child: 1  Const: 44 Type: int [line: 14]
|   |   |Sibling: 3  Assign: = Type: bool [line: 15]
|   |   |   Child: 0  Id: close Type: bool [line: 15]
|   |   |   Child: 1  Id: shave Type: bool [line: 15]
|   |   |Sibling: 4  Assign: = Type: int [line: 16]
|   |   |   Child: 0  Id: wrong Type: int [line: 16]
|   |   |   Child: 1  Op: % Type: int [line: 16]
|   |   |   |   Child: 0  Id: trousers Type: int [line: 16]
|   |   |   |   Child: 1  Op: / Type: int [line: 16]
|   |   |   |   |   Child: 0  Const: 666 Type: int [line: 16]
|   |   |   |   |   Child: 1  Id: wrong Type: int [line: 16]
|   |   |Sibling: 5  Assign: = Type: int [line: 17]
|   |   |   Child: 0  Id: gromit Type: int [line: 17]
|   |   |   Child: 1  Op: + Type: int [line: 17]
|   |   |   |   Child: 0  Op: - Type: int [line: 17]
|   |   |   |   |   Child: 0  Op: * Type: int [line: 17]
|   |   |   |   |   |   Child: 0  Id: wrong Type: int [line: 17]
|   |   |   |   |   |   Child: 1  Id: trousers Type: int [line: 17]
|   |   |   |   |   Child: 1  Id: gromit Type: int [line: 17]
|   |   |   |   Child: 1  Op: - Type: int [line: 17]
|   |   |   |   |   Child: 0  Const: 42 Type: int [line: 17]
|   |   |Sibling: 6  Assign: += Type: int [line: 18]
|   |   |   Child: 0  Id: gromit Type: int [line: 18]
|   |   |   Child: 1  Const: 27182818 Type: int [line: 18]
|   |   |Sibling: 7  Assign: -= Type: int [line: 19]
|   |   |   Child: 0  Id: gromit Type: int [line: 19]
|   |   |   Child: 1  Op: - Type: int [line: 19]
|   |   |   |   Child: 0  Const: 31415927 Type: int [line: 19]
|   |   |Sibling: 8  Assign: /= Type: int [line: 20]
|   |   |   Child: 0  Id: gromit Type: int [line: 20]
|   |   |   Child: 1  Assign: *= Type: int [line: 20]
|   |   |   |   Child: 0  Id: wrong Type: int [line: 20]
|   |   |   |   Child: 1  Const: 42 Type: int [line: 20]
|   |   |Sibling: 9  Assign: = Type: bool [line: 21]
|   |   |   Child: 0  Id: close Type: bool [line: 21]
|   |   |   Child: 1  Op: & Type: bool [line: 21]
|   |   |   |   Child: 0  Op: < Type: bool [line: 21]
|   |   |   |   |   Child: 0  Id: wrong Type: int [line: 21]
|   |   |   |   |   Child: 1  Id: trousers Type: int [line: 21]
|   |   |   |   Child: 1  Op: <= Type: bool [line: 21]
|   |   |   |   |   Child: 0  Id: trousers Type: int [line: 21]
|   |   |   |   |   Child: 1  Id: gromit Type: int [line: 21]
|   |   |Sibling: 10  Assign: = Type: bool [line: 22]
|   |   |   Child: 0  Id: shave Type: bool [line: 22]
|   |   |   Child: 1  Op: & Type: bool [line: 22]
|   |   |   |   Child: 0  Op: > Type: bool [line: 22]
|   |   |   |   |   Child: 0  Id: wrong Type: int [line: 22]
|   |   |   |   |   Child: 1  Id: trousers Type: int [line: 22]
|   |   |   |   Child: 1  Op: >= Type: bool [line: 22]
|   |   |   |   |   Child: 0  Id: trousers Type: int [line: 22]
|   |   |   |   |   Child: 1  Id: gromit Type: int [line: 22]
|   |   |Sibling: 11  Compound [line: 23]
|   |   |   Child: 0  Var a int [line: 24]
|   |   |   |Sibling: 1  Var grand int [line: 24]
|   |   |   |   Child: 0  Op: / Type: int [line: 24]
|   |   |   |   |   Child: 0  Const: 1 Type: int [line: 24]
|   |   |   |   |   Child: 1  Const: 2 Type: int [line: 24]
|   |   |   |Sibling: 2  Var day int [line: 24]
|   |   |   |   Child: 0  Op: * Type: int [line: 24]
|   |   |   |   |   Child: 0  Const: 3 Type: int [line: 24]
|   |   |   |   |   Child: 1  Const: 4 Type: int [line: 24]
|   |   |   |Sibling: 3  Var out int [line: 24]
|   |   |   |   Child: 0  Op: - Type: int [line: 24]
|   |   |   |   |   Child: 0  Const: 9 Type: int [line: 24]
|   |   |   Child: 1  Assign: = Type: int [line: 25]
|   |   |   |   Child: 0  Id: a Type: int [line: 25]
|   |   |   |   Child: 1  Assign: += Type: int [line: 25]
|   |   |   |   |   Child: 0  Id: grand Type: int [line: 25]
|   |   |   |   |   Child: 1  Assign: -= Type: int [line: 25]
|   |   |   |   |   |   Child: 0  Id: day Type: int [line: 25]
|   |   |   |   |   |   Child: 1  Id: out Type: int [line: 25]
|   |   |Sibling: 12  Assign: = Type: bool [line: 27]
|   |   |   Child: 0  Id: close Type: bool [line: 27]
|   |   |   Child: 1  Op: & Type: bool [line: 27]
|   |   |   |   Child: 0  Op: < Type: bool [line: 27]
|   |   |   |   |   Child: 0  Op: + Type: int [line: 27]
|   |   |   |   |   |   Child: 0  Op: * Type: int [line: 27]
|   |   |   |   |   |   |   Child: 0  Op: - Type: int [line: 27]
|   |   |   |   |   |   |   |   Child: 0  Const: 1 Type: int [line: 27]
|   |   |   |   |   |   |   Child: 1  Const: 2 Type: int [line: 27]
|   |   |   |   |   |   Child: 1  Const: 3 Type: int [line: 27]
|   |   |   |   |   Child: 1  Op: * Type: int [line: 27]
|   |   |   |   |   |   Child: 0  Const: 4 Type: int [line: 27]
|   |   |   |   |   |   Child: 1  Const: 5 Type: int [line: 27]
|   |   |   |   Child: 1  Op: > Type: bool [line: 27]
|   |   |   |   |   Child: 0  Op: + Type: int [line: 27]
|   |   |   |   |   |   Child: 0  Const: 6 Type: int [line: 27]
|   |   |   |   |   |   Child: 1  Const: 7 Type: int [line: 27]
|   |   |   |   |   Child: 1  Op: - Type: int [line: 27]
|   |   |   |   |   |   Child: 0  Const: 3 Type: int [line: 27]
|   |   |Sibling: 13  Assign: = Type: bool [line: 28]
|   |   |   Child: 0  Id: shave Type: bool [line: 28]
|   |   |   Child: 1  Op: | Type: bool [line: 28]
|   |   |   |   Child: 0  Const: true Type: bool [line: 28]
|   |   |   |   Child: 1  Op: & Type: bool [line: 28]
|   |   |   |   |   Child: 0  Op: < Type: bool [line: 28]
|   |   |   |   |   |   Child: 0  Op: - Type: int [line: 28]
|   |   |   |   |   |   |   Child: 0  Op: * Type: int [line: 28]
|   |   |   |   |   |   |   |   Child: 0  Const: 1 Type: int [line: 28]
|   |   |   |   |   |   |   |   Child: 1  Op: + Type: int [line: 28]
|   |   |   |   |   |   |   |   |   Child: 0  Const: 2 Type: int [line: 28]
|   |   |   |   |   |   |   |   |   Child: 1  Const: 3 Type: int [line: 28]
|   |   |   |   |   |   Child: 1  Op: * Type: int [line: 28]
|   |   |   |   |   |   |   Child: 0  Const: 4 Type: int [line: 28]
|   |   |   |   |   |   |   Child: 1  Const: 5 Type: int [line: 28]
|   |   |   |   |   Child: 1  Op: > Type: bool [line: 28]
|   |   |   |   |   |   Child: 0  Op: + Type: int [line: 28]
|   |   |   |   |   |   |   Child: 0  Const: 6 Type: int [line: 28]
|   |   |   |   |   |   |   Child: 1  Const: 7 Type: int [line: 28]
|   |   |   |   |   |   Child: 1  Op: - Type: int [line: 28]
|   |   |   |   |   |   |   Child: 0  Const: 3 Type: int [line: 28]
|   |   |Sibling: 14  If [line: 29]
|   |   |   Child: 0  Op: != Type: bool [line: 29]
|   |   |   |   Child: 0  Id: shave Type: bool [line: 29]
|   |   |   |   Child: 1  Id: close Type: bool [line: 29]
|   |   |   Child: 1  Assign: = Type: bool [line: 29]
|   |   |   |   Child: 0  Id: shave Type: bool [line: 29]
|   |   |   |   Child: 1  Op: ! Type: bool [line: 29]
|   |   |   |   |   Child: 0  Id: close Type: bool [line: 29]
|   |   |Sibling: 15  If [line: 30]
|   |   |   Child: 0  Op: | Type: bool [line: 30]
|   |   |   |   Child: 0  Op: ! Type: bool [line: 30]
|   |   |   |   |   Child: 0  Op: == Type: bool [line: 30]
|   |   |   |   |   |   Child: 0  Id: shave Type: bool [line: 30]
|   |   |   |   |   |   Child: 1  Id: close Type: bool [line: 30]
|   |   |   |   Child: 1  Op: ! Type: bool [line: 30]
|   |   |   |   |   Child: 0  Id: close Type: bool [line: 30]
|   |   |   Child: 1  Assign: = Type: bool [line: 30]
|   |   |   |   Child: 0  Id: shave Type: bool [line: 30]
|   |   |   |   Child: 1  Const: true Type: bool [line: 30]
|   |   |   Child: 2  Assign: = Type: bool [line: 31]
|   |   |   |   Child: 0  Id: close Type: bool [line: 31]
|   |   |   |   Child: 1  Const: false Type: bool [line: 31]
|   |   |Sibling: 16  While [line: 32]
|   |   |   Child: 0  Id: shave Type: bool [line: 32]
|   |   |   Child: 1  Compound [line: 32]
|   |   |   |   Child: 0  Var were int [line: 33]
|   |   |   |   |Sibling: 1  Var rabbit int [line: 33]
|   |   |   |   |Sibling: 2  Var sheep is array of int [line: 34]
|   |   |   |   Child: 1  Assign: = Type: int [line: 36]
|   |   |   |   |   Child: 0  Id: sheep Type: int [line: 36]
|   |   |   |   |   |   Child: 0  Const: 2 Type: int [line: 36]
|   |   |   |   |   Child: 1  Const: 1618 Type: int [line: 36]
|   |   |   |   |Sibling: 1  If [line: 37]
|   |   |   |   |   Child: 0  Op: < Type: bool [line: 37]
|   |   |   |   |   |   Child: 0  Id: sheep Type: int [line: 37]
|   |   |   |   |   |   |   Child: 0  Const: 2 Type: int [line: 37]
|   |   |   |   |   |   Child: 1  Const: 496 Type: int [line: 37]
|   |   |   |   |   Child: 1  Break [line: 37]
|   |   |   |   |Sibling: 2  Call: wallace Type: void [line: 38]
|   |   |   |   |   Child: 0  Assign: -- Type: int [line: 38]
|   |   |   |   |   |   Child: 0  Id: gromit Type: int [line: 38]
|   |   |   |   |   |Sibling: 1  Op: - Type: int [line: 38]
|   |   |   |   |   |   Child: 0  Id: were Type: int [line: 38]
|   |   |   |   |   |   Child: 1  Id: rabbit Type: int [line: 38]
|   |   |   |   |Sibling: 3  Compound [line: 39]
|   |   |   |   |   Child: 0  Var the int [line: 40]
|   |   |   |   |   |Sibling: 1  Var wrong int [line: 40]
|   |   |   |   |   |Sibling: 2  Var trousers int [line: 40]
|   |   |   |   |   Child: 1  Assign: = Type: int [line: 42]
|   |   |   |   |   |   Child: 0  Id: the Type: int [line: 42]
|   |   |   |   |   |   Child: 1  Assign: += Type: int [line: 42]
|   |   |   |   |   |   |   Child: 0  Id: wrong Type: int [line: 42]
|   |   |   |   |   |   |   Child: 1  Assign: ++ Type: int [line: 42]
|   |   |   |   |   |   |   |   Child: 0  Id: trousers Type: int [line: 42]
|   |   |   |   |   |Sibling: 1  If [line: 43]
|   |   |   |   |   |   Child: 0  Op: == Type: bool [line: 43]
|   |   |   |   |   |   |   Child: 0  Id: were Type: int [line: 43]
|   |   |   |   |   |   |   Child: 1  Id: rabbit Type: int [line: 43]
|   |   |   |   |   |   Child: 1  Assign: = Type: int [line: 43]
|   |   |   |   |   |   |   Child: 0  Id: were Type: int [line: 43]
|   |   |   |   |   |   |   Child: 1  Assign: -- Type: int [line: 43]
|   |   |   |   |   |   |   |   Child: 0  Id: wrong Type: int [line: 43]
|   |   |Sibling: 17  Return [line: 46]
|Sibling: 9  Func penguin returns type bool [line: 50]
|   Child: 0  Param Feathers char [line: 50]
|   |Sibling: 1  Param McGraw is array of char [line: 50]
|   |Sibling: 2  Param moon bool [line: 50]
|   |Sibling: 3  Param cheese bool [line: 50]
|   |Sibling: 4  Param launch int [line: 50]
|   Child: 1  Compound [line: 51]
|   |   Child: 0  Var tottington char [line: 52]
|   |   |   Child: 0  Const: 'x' Type: char [line: 52]
|   |   |Sibling: 1  Var Wensleydale is array of char [line: 53]
|   |   |   Child: 0  Const: "cheeeeeese" Type: is array of char [line: 53]
|   |   |Sibling: 2  Var c char [line: 54]
|   |   |Sibling: 3  Var i int [line: 55]
|   |   Child: 1  Assign: = Type: char [line: 57]
|   |   |   Child: 0  Id: tottington Type: char [line: 57]
|   |   |   Child: 1  Id: Feathers Type: char [line: 57]
|   |   |Sibling: 1  Assign: = Type: char [line: 58]
|   |   |   Child: 0  Id: McGraw Type: char [line: 58]
|   |   |   |   Child: 0  Const: 3 Type: int [line: 58]
|   |   |   Child: 1  Id: Feathers Type: char [line: 58]
|   |   |Sibling: 2  Assign: = Type: char [line: 59]
|   |   |   Child: 0  Id: Wensleydale Type: is array of char [line: 59]
|   |   |   Child: 1  Id: McGraw Type: is array of char [line: 59]
|   |   |Sibling: 3  Assign: = Type: char [line: 60]
|   |   |   Child: 0  Id: Wensleydale Type: char [line: 60]
|   |   |   |   Child: 0  Op: * Type: int [line: 60]
|   |   |   |   |   Child: 0  Id: McGraw Type: is array of char [line: 60]
|   |   |   Child: 1  Const: '*' Type: char [line: 60]
|   |   |Sibling: 4  Assign: = Type: char [line: 61]
|   |   |   Child: 0  Id: McGraw Type: is array of char [line: 61]
|   |   |   Child: 1  Const: "A Matter of Loaf and Death" Type: is array of char [line: 61]
|   |   |Sibling: 5  Compound [line: 63]
|   |   |   Child: 0  Var c char [line: 63]
|   |   |   |Sibling: 1  Var i int [line: 64]
|   |   |   Child: 1  Foreach [line: 65]
|   |   |   |   Child: 0  Id: c Type: char [line: 65]
|   |   |   |   Child: 1  Id: McGraw Type: is array of char [line: 65]
|   |   |   |   Child: 2  If [line: 65]
|   |   |   |   |   Child: 0  Op: == Type: bool [line: 65]
|   |   |   |   |   |   Child: 0  Id: c Type: char [line: 65]
|   |   |   |   |   |   Child: 1  Const: 'f' Type: char [line: 65]
|   |   |   |   |   Child: 1  Return [line: 65]
|   |   |   |   |   |   Child: 0  Const: true Type: bool [line: 65]
|   |   |   |Sibling: 1  Foreach [line: 66]
|   |   |   |   Child: 0  Id: i Type: int [line: 66]
|   |   |   |   Child: 1  Op: * Type: int [line: 66]
|   |   |   |   |   Child: 0  Id: McGraw Type: is array of char [line: 66]
|   |   |   |   Child: 2  If [line: 66]
|   |   |   |   |   Child: 0  Op: == Type: bool [line: 66]
|   |   |   |   |   |   Child: 0  Id: McGraw Type: char [line: 66]
|   |   |   |   |   |   |   Child: 0  Id: i Type: int [line: 66]
|   |   |   |   |   |   Child: 1  Const: 'f' Type: char [line: 66]
|   |   |   |   |   Child: 1  Break [line: 66]
|Sibling: 10  Func Wendolene returns type int [line: 70]
|   Child: 0  Param wool int [line: 70]
|   |Sibling: 1  Param shaun bool [line: 70]
|   |Sibling: 2  Param yarn is array of int [line: 70]
|   |Sibling: 3  Param preston is array of bool [line: 70]
|   Child: 1  Compound [line: 71]
|   |   Child: 0  Var void int [line: 72]
|   |   Child: 1  Return [line: 73]
|   |   |   Child: 0  Op: + Type: int [line: 73]
|   |   |   |   Child: 0  Op: + Type: int [line: 73]
|   |   |   |   |   Child: 0  Op: + Type: int [line: 73]
|   |   |   |   |   |   Child: 0  Id: wool Type: int [line: 73]
|   |   |   |   |   |   Child: 1  Id: yarn Type: int [line: 73]
|   |   |   |   |   |   |   Child: 0  Const: 0 Type: int [line: 73]
|   |   |   |   |   Child: 1  Op: * Type: int [line: 73]
|   |   |   |   |   |   Child: 0  Id: yarn Type: is array of int [line: 73]
|   |   |   |   Child: 1  Id: yarn Type: int [line: 73]
|   |   |   |   |   Child: 0  Op: * Type: int [line: 73]
|   |   |   |   |   |   Child: 0  Const: 7 Type: int [line: 73]
|   |   |   |   |   |   Child: 1  Id: wool Type: int [line: 73]
|Sibling: 11  Func ramsBottom returns type bool [line: 77]
|   Child: 1  Compound [line: 78]
|   |   Child: 0  Var chicken is array of int [line: 79]
|   |   |Sibling: 1  Var run is array of bool [line: 80]
|   |   |Sibling: 2  Var wallace is array of int [line: 81]
|   |   |Sibling: 3  Var gromit is array of int [line: 81]
|   |   Child: 1  Op: * Type: int [line: 83]
|   |   |   Child: 0  Const: 42 Type: int [line: 83]
|   |   |   Child: 1  Call: Wendolene Type: int [line: 83]
|   |   |   |   Child: 0  Op: + Type: int [line: 83]
|   |   |   |   |   Child: 0  Op: + Type: int [line: 83]
|   |   |   |   |   |   Child: 0  Const: 1 Type: int [line: 83]
|   |   |   |   |   |   Child: 1  Const: 2 Type: int [line: 83]
|   |   |   |   |   Child: 1  Const: 3 Type: int [line: 83]
|   |   |   |   |Sibling: 1  Op: | Type: bool [line: 83]
|   |   |   |   |   Child: 0  Op: ! Type: bool [line: 83]
|   |   |   |   |   |   Child: 0  Const: true Type: bool [line: 83]
|   |   |   |   |   Child: 1  Op: & Type: bool [line: 83]
|   |   |   |   |   |   Child: 0  Const: true Type: bool [line: 83]
|   |   |   |   |   |   Child: 1  Const: false Type: bool [line: 83]
|   |   |   |   |Sibling: 2  Id: chicken Type: is array of int [line: 83]
|   |   |   |   |Sibling: 3  Id: run Type: is array of bool [line: 83]
|   |   |Sibling: 1  Id: run Type: bool [line: 84]
|   |   |   Child: 0  Op: - Type: int [line: 84]
|   |   |   |   Child: 0  Op: * Type: int [line: 84]
|   |   |   |   |   Child: 0  Id: run Type: is array of bool [line: 84]
|   |   |   |   Child: 1  Const: 1 Type: int [line: 84]
|   |   |Sibling: 2  Return [line: 86]
|   |   |   Child: 0  Op: ! Type: bool [line: 86]
|   |   |   |   Child: 0  Op: >= Type: bool [line: 86]
|   |   |   |   |   Child: 0  Id: wallace Type: int [line: 86]
|   |   |   |   |   |   Child: 0  Const: 1 Type: int [line: 86]
|   |   |   |   |   Child: 1  Op: * Type: int [line: 86]
|   |   |   |   |   |   Child: 0  Op: - Type: int [line: 86]
|   |   |   |   |   |   |   Child: 0  Id: gromit Type: int [line: 86]
|   |   |   |   |   |   |   |   Child: 0  Const: 2 Type: int [line: 86]
|   |   |   |   |   |   Child: 1  Const: 3 Type: int [line: 86]
|Sibling: 12  Func cheese returns type int [line: 89]
|   Child: 0  Param x int [line: 89]
|   |Sibling: 1  Param y int [line: 89]
|   Child: 1  While [line: 89]
|   |   Child: 0  Op: > Type: bool [line: 89]
|   |   |   Child: 0  Id: x Type: int [line: 89]
|   |   |   Child: 1  Const: 0 Type: int [line: 89]
|   |   Child: 1  If [line: 89]
|   |   |   Child: 0  Op: > Type: bool [line: 89]
|   |   |   |   Child: 0  Id: y Type: int [line: 89]
|   |   |   |   Child: 1  Const: 3 Type: int [line: 89]
|   |   |   Child: 1  Assign: -- Type: int [line: 89]
|   |   |   |   Child: 0  Id: x Type: int [line: 89]
|   |   |   Child: 2  Return [line: 89]
|   |   |   |   Child: 0  Op: % Type: int [line: 89]
|   |   |   |   |   Child: 0  Op: * Type: int [line: 89]
|   |   |   |   |   |   Child: 0  Id: x Type: int [line: 89]
|   |   |   |   |   |   Child: 1  Id: x Type: int [line: 89]
|   |   |   |   |   Child: 1  Id: y Type: int [line: 89]
|Sibling: 13  Func Wensleydale returns type int [line: 91]
|   Child: 0  Param x int [line: 91]
|   |Sibling: 1  Param y int [line: 91]
|   Child: 1  Return [line: 91]
|   |   Child: 0  Call: cheese Type: int [line: 91]
|   |   |   Child: 0  Id: x Type: int [line: 91]
|   |   |   |Sibling: 1  Id: gromit Type: int [line: 91]
|Sibling: 14  Func main returns type int [line: 93]
|   Child: 1  Compound [line: 94]
|   |   Child: 0  Var wool int [line: 95]
|   |   |Sibling: 1  Var yarn is array of int [line: 95]
|   |   |Sibling: 2  Var shaun bool [line: 96]
|   |   |Sibling: 3  Var preston is array of bool [line: 96]
|   |   Child: 1  Call: wallace Type: void [line: 98]
|   |   |   Child: 0  Call: cheese Type: int [line: 98]
|   |   |   |   Child: 0  Const: 62 Type: int [line: 98]
|   |   |   |   |Sibling: 1  Op: - Type: int [line: 98]
|   |   |   |   |   Child: 0  Const: 311 Type: int [line: 98]
|   |   |   |Sibling: 1  Id: gromit Type: int [line: 98]
|   |   |Sibling: 1  Id: yarn Type: int [line: 99]
|   |   |   Child: 0  Op: ? Type: int [line: 99]
|   |   |   |   Child: 0  Op: * Type: int [line: 99]
|   |   |   |   |   Child: 0  Id: yarn Type: is array of int [line: 99]
|   |   |Sibling: 2  Return [line: 100]
|   |   |   Child: 0  Call: Wendolene Type: int [line: 100]
|   |   |   |   Child: 0  Op: * Type: int [line: 100]
|   |   |   |   |   Child: 0  Op: * Type: int [line: 100]
|   |   |   |   |   |   Child: 0  Id: preston Type: is array of bool [line: 100]
|   |   |   |   |   Child: 1  Op: * Type: int [line: 100]
|   |   |   |   |   |   Child: 0  Id: yarn Type: is array of int [line: 100]
|   |   |   |   |Sibling: 1  Id: shaun Type: bool [line: 100]
|   |   |   |   |Sibling: 2  Id: yarn Type: is array of int [line: 100]
|   |   |   |   |Sibling: 3  Id: preston Type: is array of bool [line: 100]
|Sibling: 15  Func null returns type void [line: 103]
|Sibling: 16  Func MrNobody returns type void [line: 104]
|   Child: 0  Param shaun int [line: 104]
|   |Sibling: 1  Param the int [line: 104]
|   |Sibling: 2  Param sheep int [line: 104]
|Sibling: 17  Var aBigLongVariableName6 bool [line: 106]
|Sibling: 18  Var odd int [line: 107]
|Sibling: 19  Var separation int [line: 107]
|Sibling: 20  Var of int [line: 107]
|Sibling: 21  Var stuff int [line: 108]
|Sibling: 22  Var ant is array of char [line: 110]
|   Child: 0  Const: ""'" Type: is array of char [line: 110]
|Sibling: 23  Var bat char [line: 111]
|   Child: 0  Const: ''' Type: char [line: 111]
|Sibling: 24  Var cat is array of char [line: 112]
|   Child: 0  Const: "t
" Type: is array of char [line: 112]
|Sibling: 25  Var dog char [line: 113]
|   Child: 0  Const: 't' Type: char [line: 113]
Number of warnings: 0
Number of errors: 0
