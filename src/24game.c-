// 24game.c-
// Author: Christopher Goes
// Fall 2015 CS 445 Compilers
// Release 1.0 - December 14, 2015
// Language: Robert Heckendorn's C- language
// 
// The 24 Game tests one's mental arithmetic
// Background: https://en.wikipedia.org/wiki/24_Game
//
//
// Four digits will be randomly chosen and displayed.
// The goal: enter an expression that evaluates to 24.
// Only * / + - operators are allowed.
// Division is truncating integer division
// No shoving numberstogether!
//      1 2 1 2
//      12 + 12 = 24
//      "I win woohoo!" (No, you don't...)
// The order of the digits when given does not have to be preserved.
// 
//
// Example:
// Output: 9 2 2 7
// Input: dig, op, dig, op, dig, op, dig
// Total of 7 characters input, 4 digits and 3 operators.
//
// ? http://rosettacode.org/wiki/24_game
//
//

int a, b, c, d;
int dig1, dig2, dig3, dig4;
char op1, op2, op3;

bool checkDig(int dig)
{
    if(dig != a & dig != b & dig != c & dig != d)
    {
        return false;
    }
    else
    {
        return true;
    }
}

bool checkOp(char op)
{
    if(op != '*' & op != '/' & op != '+' & op != '-')
    {
        return false;
    }
    else
    {
        return true;
    }
}


genDigits()
{
	int range;
	
	range = 9;
	    
	a = ?range + 1;
	b = ?range + 1;
	c = ?range + 1;
	d = ?range + 1;
}

outputDigits()
{
	outnl(); // because "Enter command:" is annoying
	output(a);
	output(b);
	output(c);
	output(d);
	outnl();
}

getUserExpression()
{
    dig1 = input();
    op1 = inputc();
    dig2 = input();
    op2 = inputc();
    dig3 = input();
    op3 = inputc();
    dig4 = input();
}

bool checkUserExpression()
{
    if(checkDig(dig1) == false & checkDig(dig2) == false & checkDig(dig3) == false & checkDig(dig4) == false)
    {
        outputc('D');
        if(checkOp(op1) == false & checkOp(op2) == false & checkOp(op3) == false)
        {
            outputc('O');
            return false;
        }
        else
        {
            return false;
        }
    }

    else
    {
        return true;
    }

}

main()
{
    bool temp;
    
    genDigits();
    outputDigits();
    getUserExpression();
    temp = checkUserExpression();
    if(!temp)
    {
        outnl();
        outputc('N');
        outputc('O');
        outputc('!');
        outnl();
        return;
    }
	


}
